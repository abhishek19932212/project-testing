AWSTemplateFormatVersion: 2010-09-09
Description: 'Creates one VPCs, peers the VPCs, launch one instance, Clone RDS Database Create ALBs and Create DNS record set for them'
Parameters:
  DefaultVPCIDCIDRRange:
    Description: The IP address range of your present VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.31.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
# Verify MainVPC with you existing VPC and Change as per your need
  MainVPC:
    Description: Default VPC.
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-afb094d7
  QA1VPCIDCIDRRange:
    Description: The IP address range for your new Private VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.32.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2SubnetCIDRRange:
    Description: The IP address range for a subnet in QA1VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.32.0.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2PublicSubnetCIDRRange1:
    Description: The IP address range for a subnet in QA1VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.32.1.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2PublicSubnetCIDRRange2:
    Description: The IP address range for a subnet in QA1VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.32.2.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBInstanceType:
    Type: String
    Default: db.r5.large
Resources:
  QA1VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref QA1VPCIDCIDRRange
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  QA1PrivateEC2Subnet:
    Type: 'AWS::EC2::Subnet'
    DependsOn: QA1VPC
    Properties:
      VpcId: !Ref QA1VPC
      CidrBlock: !Ref EC2SubnetCIDRRange
      AvailabilityZone: "us-west-2a"
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: QA1PrivateEC2Subnet
    Properties:
      VpcId: !Ref QA1VPC
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: PrivateRouteTable
    Properties:
      SubnetId: !Ref QA1PrivateEC2Subnet
      RouteTableId: !Ref PrivateRouteTable
  QA1PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: QA1VPC 
    Properties:
      CidrBlock: !Ref EC2PublicSubnetCIDRRange1
      VpcId: !Ref QA1VPC
      AvailabilityZone: "us-west-2a"
  QA1PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: QA1VPC
    Properties:
      CidrBlock: !Ref EC2PublicSubnetCIDRRange2
      VpcId: !Ref QA1VPC
      AvailabilityZone: "us-west-2b"
  QA1NatGateway:
   Type: AWS::EC2::NatGateway
   DependsOn: QA1EIP
   Properties:
      AllocationId:
         Fn::GetAtt:
         - QA1EIP
         - AllocationId
      SubnetId:
         Ref: QA1PublicSubnet1
      Tags:
      - Key: stack
        Value: qa-stack
  QA1EIP:
   DependsOn: 'QA1InternetGateway'
   Type: AWS::EC2::EIP
   Properties:
      Domain: QA1VPC
  QA1InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: QA1VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn: QA1InternetGateway
    Properties:
      VpcId: !Ref QA1VPC
      InternetGatewayId: !Ref QA1InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: QA1PublicSubnet1
    Properties:
      VpcId: !Ref QA1VPC
  PeeringRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: QA1VPCPeeringConnection
    Properties:
      DestinationCidrBlock: 172.31.0.0/16
      RouteTableId: !Ref PrivateRouteTable
      VpcPeeringConnectionId: !Ref QA1VPCPeeringConnection
  PeeringRoute2:
    Type: 'AWS::EC2::Route'
    DependsOn: QA1VPCPeeringConnection
    Properties:
      DestinationCidrBlock: 172.31.0.0/16
      RouteTableId: !Ref PublicRouteTable
      VpcPeeringConnectionId: !Ref QA1VPCPeeringConnection
#Change Route Table ID with your existing Route Table 
  PeeringRoute3:
    Type: 'AWS::EC2::Route'
    DependsOn: QA1VPCPeeringConnection
    Properties:
      DestinationCidrBlock: 172.32.0.0/16
      RouteTableId: rtb-92d4d5e9
      VpcPeeringConnectionId: !Ref QA1VPCPeeringConnection
#Change Route Table ID with your existing Route Table
  PeeringRoute4:
    Type: 'AWS::EC2::Route'
    DependsOn: QA1VPCPeeringConnection
    Properties:
      DestinationCidrBlock: 172.32.0.0/16
      RouteTableId: rtb-0989f3ea551fa8c1f
      VpcPeeringConnectionId: !Ref QA1VPCPeeringConnection
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: QA1NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref QA1NatGateway
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref QA1InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: QA1PublicSubnet1
    Properties:
      SubnetId: !Ref QA1PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn: QA1PublicSubnet2
    Properties:
      SubnetId: !Ref QA1PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  QA1VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    DependsOn: QA1VPC
    Properties:
      VpcId: !Ref MainVPC
      PeerVpcId: !Ref QA1VPC
# RDS Database Clone in different VPC using Snapshot
  QA1DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: QA1VPC
    Properties:
      GroupName: qa1-dbclone-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
          Description: For traffic from Internet
      GroupDescription: Security Group for demo server
      VpcId: !Ref QA1VPC
  QA1DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    DependsOn: PeeringRoute4
    Properties:
      DBSubnetGroupDescription: qa1-dbclone-subnetgroup
      DBSubnetGroupName: qa1-dbclone-subnetgroup
      SubnetIds: 
       - !Ref QA1PrivateEC2Subnet
       - !Ref QA1PublicSubnet1
       - !Ref QA1PublicSubnet2
#Change Snapshot Identifier with your Snapshot ARN
  DBCluster:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Snapshot
    Type: 'AWS::RDS::DBCluster'
    DependsOn: QA1DBSubnetGroup
    Properties:
      Engine: aurora-mysql
      SnapshotIdentifier: arn:aws:rds:us-west-2:162022628823:cluster-snapshot:demo-snapshot
      DBSubnetGroupName: qa1-dbclone-subnetgroup
      DBClusterIdentifier: qaauroraplanhub-clone-cluster1
      VpcSecurityGroupIds:
        - !Ref QA1DBSecurityGroup
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    DependsOn: DBCluster
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBSubnetGroupName: qa1-dbclone-subnetgroup
      Engine: aurora-mysql
      DBInstanceClass: !Ref DBInstanceType
      DBInstanceIdentifier: auroraqaplanhub-instance1
      PubliclyAccessible: true
# EC2 Instance 
  SecurityGroupDemoSvrTraffic:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: DBInstance
    Properties:
      GroupName: EC2Demoserver-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      GroupDescription: Security Group for demo server
      VpcId: !Ref VPC
  EC2InstanceDemoSvr:
    Type: 'AWS::EC2::Instance'
    DependsOn: SecurityGroupDemoSvrTraffic
    Properties:
      AvailabilityZone: us-west-2a
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: '8'
            VolumeType: gp2
      ImageId: ami-03d5c68bab01f3496
      InstanceType: t2.micro
      KeyName: jenkins-node
      UserData:  
       Fn::Base64: |
        #!/bin/sh
        sudo apt-get -y update
        sudo apt-get -y upgrade
        sudo apt-get -y install default-jre
        sudo grep -q "^[^#]*PasswordAuthentication" /etc/ssh/sshd_config && sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config || echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
        sudo service sshd restart
        sudo adduser jenkins --gecos "First Last,RoomNumber,WorkPhone,HomePhone" --disabled-password
        echo "jenkins:admin123" | sudo chpasswd
        cat <<'EOF' > /etc/apache2/sites-available/planhub-frontend-waf.conf
        <VirtualHost *:80>
        ServerName qa1.planhub.com
        ServerAlias qa1.planhub.com
        DocumentRoot /var/www/html/frontend-planhub-new/dist
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log cloudwatch
        RewriteEngine On
        RewriteCond %{HTTP:X-Forwarded-Proto} =http
        RewriteRule .* https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]
        </VirtualHost>
        <VirtualHost *:443>
        DocumentRoot /var/www/html/frontend-planhub-new/dist
        ServerName app.planhub.com
        ServerAlias app.planhub.com
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log cloudwatch
        RewriteEngine On
        RewriteRule ^#/(.*)$ $1
        SSLEngine on
        SSLCertificateFile /etc/apache2/ssl/NEW_STAR_planhub_com.crt
        SSLCertificateKeyFile /etc/apache2/ssl/new_star.planhub.com.key
        SSLCertificateChainFile  /etc/apache2/ssl/planhub_intermediate.crt
        SSLCipherSuite HIGH:+MEDIUM:!SSLv2:!EXP:!ADH:!aNULL:!eNULL:!NULL
        Header always set Strict-Transport-Security "max-age=63072000;"
        SSLProtocol all -SSLv2 -SSLv3
        SSLHonorCipherOrder on
        SSLCipherSuite "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+S$
        <Directory  /var/www/html/frontend-planhub-new>
        AllowOverride All
        Require all granted
        RewriteEngine On
        RewriteRule ^(.*)$ $1
        </Directory>
        <IfModule mod_deflate.c>
        SetOutputFilter DEFLATE
        AddOutputFilterByType DEFLATE text/plain
        AddOutputFilterByType DEFLATE text/html
        AddOutputFilterByType DEFLATE text/xml
        AddOutputFilterByType DEFLATE text/css
        AddOutputFilterByType DEFLATE application/xml
        AddOutputFilterByType DEFLATE application/xhtml+xml
        AddOutputFilterByType DEFLATE application/rss+xml
        AddOutputFilterByType DEFLATE application/javascript
        AddOutputFilterByType DEFLATE application/x-javascript
        SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|iso|tar|bz2|sit|rar) no-gzip dont-vary
        SetEnvIfNoCase Request_URI .(?:gif|jpe?g|jpg|ico|png)  no-gzip dont-vary
        SetEnvIfNoCase Request_URI .pdf no-gzip dont-vary
        BrowserMatch ^Mozilla/4 gzip-only-text/html
        BrowserMatch ^Mozilla/4.0[678] no-gzip
        BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
        Header append Vary User-Agent env=!dont-vary
        DeflateFilterNote Input instr
        DeflateFilterNote Output outstr
        DeflateFilterNote Ratio ratio
        LogFormat '"%r" %{outstr}n/%{instr}n %{ratio}n%%' DEFLATE
        CustomLog logs/deflate_log DEFLATE
        </IfModule>
        </VirtualHost>
        EOF
        cat <<'EOF' > /etc/apache2/sites-available/planhub-frontend-waf.conf
        <VirtualHost *:80>
        ServerName qa1.api.planhub.com
        ServerAlias qa1.api.planhub.com 
        DocumentRoot /var/www/html/api-planhub/public   
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log cloudwatch
        RewriteEngine On
        RewriteCond %{HTTP:X-Forwarded-Proto} =http
        RewriteRule .* https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]
        </VirtualHost>
        <VirtualHost *:443>
        DocumentRoot /var/www/html/api-planhub/public
        ServerName api.planhub.com
        ServerAlias api.planhub.com
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log cloudwatch
        SSLEngine on
        SSLCertificateFile /etc/apache2/ssl/NEW_STAR_planhub_com.crt
        SSLCertificateKeyFile /etc/apache2/ssl/new_star.planhub.com.key
        SSLCertificateChainFile  /etc/apache2/ssl/planhub_intermediate.crt
        SSLCipherSuite HIGH:+MEDIUM:!SSLv2:!EXP:!ADH:!aNULL:!eNULL:!NULL
        Header always set Strict-Transport-Security "max-age=63072000;"
        SSLProtocol all -SSLv2 -SSLv3
        SSLHonorCipherOrder on
        SSLCipherSuite "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+S$
        <Directory /var/www/html/api-planhub/public>
        AllowOverride All
        Options Indexes FollowSymLinks
        Require all granted
        RewriteEngine On
        RewriteBase /
        RewriteCond %{RREQUEST_FILENAME} !-d
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteRule ^ index.php [QSA,L]
        RewriteRule .*\.(pdf|css|gif|png|bmp)$ - [F,NC]
        RewriteCond %{REQUEST_METHOD} OPTIONS
        RewriteRule ^(.*)$ $1 [R=200,L]
        </Directory>
        <IfModule mod_deflate.c>
        SetOutputFilter DEFLATE
        AddOutputFilterByType DEFLATE text/plain
        AddOutputFilterByType DEFLATE text/html
        AddOutputFilterByType DEFLATE text/xml
        AddOutputFilterByType DEFLATE text/css
        AddOutputFilterByType DEFLATE text/xml
        AddOutputFilterByType DEFLATE text/css
        AddOutputFilterByType DEFLATE application/xml
        AddOutputFilterByType DEFLATE application/xhtml+xml
        AddOutputFilterByType DEFLATE application/rss+xml
        AddOutputFilterByType DEFLATE application/javascript
        AddOutputFilterByType DEFLATE application/x-javascript
        SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|iso|tar|bz2|sit|rar) no-gzip dont-vary
        SetEnvIfNoCase Request_URI .(?:gif|jpe?g|jpg|ico|png)  no-gzip dont-vary
        SetEnvIfNoCase Request_URI .pdf no-gzip dont-vary
        BrowserMatch ^Mozilla/4 gzip-only-text/html
        BrowserMatch ^Mozilla/4.0[678] no-gzip
        BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
        Header append Vary User-Agent env=!dont-vary
        DeflateFilterNote Input instr
        DeflateFilterNote Output outstr
        DeflateFilterNote Ratio ratio
        LogFormat '"%r" %{outstr}n/%{instr}n %{ratio}n%%' DEFLATE
        CustomLog logs/deflate_log DEFLATE
        Header set Access-Control-Allow-Origin "*"
        </IfModule> 
        </VirtualHost>
        EOF
        systemctl restart apache2
      NetworkInterfaces:
        - Description: Primary network interface
          DeviceIndex: '0'
          SubnetId: !Ref QA1PrivateEC2Subnet
          PrivateIpAddress: 172.32.0.155
          GroupSet:
            - !Ref SecurityGroupDemoSvrTraffic
